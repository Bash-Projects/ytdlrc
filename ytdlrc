#!/usr/bin/env sh
#
#                             dP         dP dP
#                             88         88 88
#                  dP    dP d8888P .d888b88 88 88d888b. .d8888b.
#                  88    88   88   88'  `88 88 88'  `88 88'  `""
#                  88.  .88   88   88.  .88 88 88       88.  ...
# .--------------- `8888P88   dP   `88888P8 dP dP       `88888P' --------------.
# |::::::::::::::::......88 ::..::::.......:..:..::::::::......::::::::::::::::|
# |:::::::::::::::::d8888P ::::::::::::::::::::::::::::::::::::::::::::::::::::|
# |:::::::::::::::::......:::::::::::::::::::::::::::::::::::::::::::::::::::::|
# |----------------------------------------------------------------------------|
# |     file | ytdlrc                                                          |
# |     desc | Downloads files via `youtube-dl` and moves them via `rclone`    |
# |   author | bardisty <b@bah.im>                                             |
# |   source | https://github.com/bardisty/ytdlrc                              |
# | modified | Mon Jan 07 2019 19:04:28 PST -0800                              |
# `----------------------------------------------------------------------------'


# Enable debugging for verbose output
debug=false

# Working directory for the script
ytdl_root_dir="${HOME}/ytdlrc"

# Where to download files before moving them to the rclone remote
ytdl_download_dir="${ytdl_root_dir%/}/stage"

# List of URL's / channels / playlists to download, e.g.:
#     * `ytuser:username`
#     * `https://www.youtube.com/user/username`
#     * `https://www.youtube.com/playlist?list=PLK9Sc5q_4K6aNajVLKtkaAB1JGmKyccf2`
ytdl_snatch_list="${ytdl_root_dir%/}/snatch.list"

# List of downloaded/processed files; prevents youtube-dl from
# redownloading files that have already been moved to the rclone remote
ytdl_archive_list="${ytdl_root_dir%/}/archive.list"

# What video format(s) to grab
ytdl_format="bestvideo+bestaudio/best"

# Output template for downloaded filenames
ytdl_output_template="%(uploader)s.%(upload_date)s.%(title)s.%(resolution)s.%(id)s.%(ext)s"

# Write subtitle file (if available)
ytdl_write_subtitles=true

# Write automatically generated subtitle file (YouTube only)
ytdl_write_automatic_subtitles=true

# Download all the available subtitles of the video
#     * If `false`, only subtitles matching the specified language(s)
#       in the `ytdl_subtitle_lang` setting will be downloaded
#     * If `true`, downloading an entire channel will take considerably
#       more time to process
ytdl_write_all_subtitles=false

# What subtitle format to use
ytdl_subtitle_format="srt/best"

# What subtitle languages to download (separated by commas)
#     * Use `youtube-dl --list-subs` to view available language tags
#     * Ignored if `ytdl_write_all_subtitles=true`
ytdl_subtitle_lang="en"

# What value to grab from the first video in a playlist
#     * This affects the directory hierarchy on the rclone remote, e.g.:
#           `remote:archive/youtube/{playlist_title}/{downloaded files}`
#     * The default value - `playlist_title` - will play well with YouTube
#       usernames/channels (ytuser:username or URL to channel), as well as
#       playlists containing videos from different uploaders. However it
#       will not play well with individual YouTube video URL's, as these
#       usually return "NA" as the playlist title. A value of `uploader`
#       will play well with individual videos and entire channels but not
#       with playlists containing videos from different uploaders.
ytdl_video_value="playlist_title"

# If `youtube-dl` is unable to pull `ytdl_video_value` (default:
# playlist_title) from the first video in a playlist, use this value instead
#     * See the `ytdl_skip_on_fail` option if you would rather skip the
#       playlist altogether so videos are never downloaded / uploaded into a
#       directory that doesn't match the name of the playlist / channel
ytdl_default_video_value="unknown-playlist"

# Skip playlist if `youtube-dl` is unable to pull `ytdl_video_value`
# (default: playlist_title) from the first video in a playlist
#     * Set to `false` if you don't want to skip a playlist if `youtube-dl`
#       fails to pull the `ytdl_video_value` (default: playlist_title).
#       Instead, videos will be downloaded / uploaded into a directory named
#       after `ytdl_default_video_value` (default: "unknown-playlist")
ytdl_skip_on_fail=true

# By default, the directories videos are saved in have titlecase names, e.g.
# `Some_Channel_Name`. Set to `true` if you prefer lowercase names.
ytdl_lowercase_directories=false

# Path to rclone config
rclone_config="${HOME}/.config/rclone/rclone.conf"

# Should we `copy` or `move` files?
rclone_command="move"

# Where to store downloaded files on the rclone remote
rclone_destination="remote:archive/youtube"

# Rclone flags
#     * Add any additional rclone flags here, e.g.: "--syslog --bwlimit 5M"
#         * "--config" is already set, see `rclone_config` variable above
#         * If debug=true, "-vv --stats 1s --progress" is appended to rclone
#           command
#         * If debug=false, "-q" is appended to rclone command
rclone_flags="--transfers 8 --checkers 16 --acd-upload-wait-per-gb 5m"


# ---------- You probably don't need to edit anything below this ----------


# Colors for info / error printouts
if tty > /dev/null 2>&1; then
  if command -v tput > /dev/null 2>&1; then
    text_reset=$(tput sgr0)
    text_bold=$(tput bold)
    text_red=$(tput setaf 1)
    text_yellow=$(tput setaf 3)
  fi
fi

# Where to store temp runtime files (FIFO and lock file)
temp_file_dir="/tmp"

# Where to store FIFO for reading the snatch list
fifo="${temp_file_dir%/}/ytdlrc.fifo"

# Where to store lock file to prevent the script from running more than once
# at a time
lock_file="${temp_file_dir%/}/ytdlrc.lock"

# Prefix for all printouts
printout_prefix="${text_bold}${text_yellow}[YTDLRC]${text_reset}"

# Prefix for error printouts
printout_prefix_error="${text_bold}${text_red}Error:${text_reset}"

# Set `youtube-dl` and `rclone` command flags depending on debugging status
if [ "$debug" = true ]; then
  ytdl_debug_flags="--verbose"
  rclone_debug_flags="-vv --stats 1s --progress"
else
  ytdl_debug_flags="--quiet"
  rclone_debug_flags="-q"
fi

if [ "$ytdl_write_subtitles" = true ] || [ "$ytdl_write_automatic_subtitles" = true ]; then
  ytdl_subtitle_flags="--sub-format ${ytdl_subtitle_format}"

  # Set `youtube-dl` flags for writing subtitle files
  if [ "$ytdl_write_subtitles" = true ]; then
    ytdl_subtitle_flags="${ytdl_subtitle_flags} --write-sub"
  fi

  # Set `youtube-dl` flags for writing automatic subtitles
  if [ "$ytdl_write_automatic_subtitles" = true ]; then
    ytdl_subtitle_flags="${ytdl_subtitle_flags} --write-auto-sub"
  fi

  # Set `youtube-dl` flags for writing all subtitles or only specified languages
  if [ "$ytdl_write_all_subtitles" = true ]; then
    # Append `--all-subs` flag
    ytdl_subtitle_flags="${ytdl_subtitle_flags} --all-subs"
  else
    # Append `--sub-lang` flag
    ytdl_subtitle_flags="${ytdl_subtitle_flags} --sub-lang $ytdl_subtitle_lang"
  fi

fi


# POSIX-friendly variable printing
say() {
  printf %s\\n "${printout_prefix} ${1}"
}


# Turn `[ "$debug" = true ] && say "message"`
# into `say_debug "message"`
say_debug() {
  if [ "$debug" = true ]; then
    say "$1"
  fi
}


# Error printouts
say_error() {
  say "${printout_prefix_error} ${1}" >&2
}


# Determine if a directory is empty
# Source: http://www.etalabs.net/sh_tricks.html
is_empty() {
  cd "$1" || return 0
  set -- .[!.]* ; test -f "$1" && return 1
  set -- ..?* ; test -f "$1" && return 1
  set -- * ; test -f "$1" && return 1
  return 0
}


# Get a value from the video (default is playlist_title) and store it in a
# variable
#     * Required to store videos on rclone remote in separate directories
#       using the pulled value
get_video_value() {
  # Printout example: "Grabbing 'playlist_title' from 'ytuser:username'..."
  say_debug "Grabbing '${1}' from '${3}'..."

  video_value=$(
    $ytdl_bin \
      --force-ipv4 \
      --get-filename \
      --output "%(${1})s" \
      --playlist-items "$2" \
      --restrict-filenames \
      "$3"
  )

  # Assign a default value if `youtube-dl` was unable to pull
  # `playlist_title` from the video
  video_value="${video_value:-$ytdl_default_video_value}"
}


download_all_the_things() {
  $ytdl_bin \
    --force-ipv4 \
    --continue \
    --download-archive "$ytdl_archive_list" \
    --exec "$rclone_bin $rclone_command \
      '{}' '${rclone_destination%/}/${video_value}' \
      --config '$rclone_config' \
      $rclone_flags \
      $rclone_debug_flags" \
    --format "$ytdl_format" \
    --ignore-config \
    --ignore-errors \
    --no-overwrites \
    --output "${ytdl_download_dir%/}/${video_value}/${ytdl_output_template}" \
    --restrict-filenames \
    --write-description \
    --write-info-json \
    --write-thumbnail \
    "$ytdl_debug_flags" \
    $ytdl_subtitle_flags \
    "$1"
}


# Catch CTRL-C; clean up temp files and exit script to prevent further
# commands from executing
trap 'rm "$lock_file" && rm "$fifo" && exit 0' 2


# Check for `youtube-dl` command
if command -v youtube-dl > /dev/null 2>&1; then
  ytdl_bin=$(command -v youtube-dl)
else
  say_error "\`youtube-dl\` command not found."
  exit 127
fi


# Check for `rclone` command
if command -v rclone > /dev/null 2>&1; then
  rclone_bin=$(command -v rclone)
else
  say_error "\`rclone\` command not found."
  exit 127
fi


# Check for `ffmpeg` command
if ! command -v ffmpeg > /dev/null 2>&1; then
  say_error "\`ffmpeg\` command not found."
  exit 127
fi


# Check if rclone config exists
if [ ! -f "$rclone_config" ]; then
  say_error "rclone configuration not found: ${rclone_config}."
  exit 1
  # Check if rclone remote has any issues
  elif ! $rclone_bin about "$rclone_destination" > /dev/null 2>&1; then
  say_error "could not read rclone remote '${rclone_destination}'. See the \`rclone_destination\` setting."
  say "If the remote looks correct, check for issues by running: \`rclone about ${rclone_destination}\`"
  exit 1
fi


# Check for existence of lock file
if [ -f "$lock_file" ]; then
  # Lock file exists; do nothing
  say_debug "Lock file exists: ${lock_file}"
  say_debug "Exiting..."
  exit 0
else
  # Lock file doesn't exist; create it
  say_debug "Lock file doesn't exist. Attempting to create ${lock_file}..."
  # Check if temp file directory exists
  if [ -d "${temp_file_dir%/}" ]; then
    # Temp file directory exists; attempt to create lock file
    if touch "$lock_file"; then
        say_debug "Creating '${lock_file}' succeeded. Continuing..."
      else
        say_error "could not create lock file '${lock_file}'. Exiting..."
        exit 1
      fi
  else
    # Temp file directory does not exist; attempt to create it
    say_debug "Temp file directory '${temp_file_dir%/}' not found. Attempting to create it..."
    if mkdir -p "${temp_file_dir%/}"; then
      # Attempt to create lock file
      say_debug "Creating '${temp_file_dir%/}' succeeded. Creating lock file..."
      if touch "$lock_file"; then
        say_debug "Creating '${lock_file}' succeeded. Continuing..."
      else
        say_error "could not create lock file '${lock_file}'. Exiting..."
        exit 1
      fi
    else
      say_error "could not create temp directory '${temp_file_dir%/}'. Exiting..."
      exit 1
    fi
  fi
fi


# Generate required runtime directory and files if they don't already exist
if [ ! -d "${ytdl_download_dir%/}" ]; then
  say "Creating download directory: ${ytdl_download_dir%/}"
  if ! mkdir -p "${ytdl_download_dir%/}"; then
    say_error "could not create download directory '${ytdl_download_dir%/}'. Exiting..."
    exit 1
  fi
fi

if [ ! -f "$ytdl_snatch_list" ]; then
  say "Creating snatch list: ${ytdl_snatch_list}"
  if ! touch "$ytdl_snatch_list"; then
    say_error "could not create snatch list '${ytdl_snatch_list}'. Exiting..."
    exit 1
  fi
fi

if [ ! -f "$ytdl_archive_list" ]; then
  say "Creating archive list: ${ytdl_archive_list}"
  if ! touch "$ytdl_archive_list"; then
    say_error "could not create archive list '${ytdl_archive_list}'. Exiting..."
    exit 1
  fi
fi


# Read through `ytdl_snatch_list` file only if it contains URL's /
# usernames, assign each line to the `url` variable
#     * We do this instead of using youtube-dl's `--batch-file` option in
#       order to save playlist/channel names to a variable for an improved
#       directory hierarchy on the rclone remote destination
if [ -s "$ytdl_snatch_list" ]; then
  mkfifo "$fifo"
  grep -v '^ *#' < "$ytdl_snatch_list" > "$fifo" &
  while IFS= read -r url; do
    if [ -n "$url" ]; then
      say "Processing ${url}..."
      get_video_value "$ytdl_video_value" "1" "$url"

      if [ "$video_value" = "$ytdl_default_video_value" ]; then
        # Failed to grab video value, try the 2nd video before proceeding...
        say_debug "Failed to grab '${ytdl_video_value}' from '${url}'. Trying 2nd video instead..."
        get_video_value "$ytdl_video_value" "2" "$url"
        if [ "$video_value" = "$ytdl_default_video_value" ]; then
          # Failed again, if true skip, if false continue with the default
          # value (`ytdl_default_video_value`)
          if [ "$ytdl_skip_on_fail" = true ]; then
            say_debug "Failed to grab '${ytdl_video_value}' from '${url}' after 2 attempts. Skipping..."
            continue
          else
            # Printout example: "Unable to grab 'playlist_title' from '{url}'. Using
            # default value 'unknown-playlist' instead."
            say_debug "Unable to grab '${ytdl_video_value}' from '${url}'. Using default value '${ytdl_default_video_value}' instead."
          fi
        fi
      fi

      # Process value returned by `get_video_value()`
      if [ "$video_value" != "$ytdl_default_video_value" ]; then
        # Printout example: "'playlist_title' is 'Uploads_from_Some_Channel_Name'"
        say_debug "'${ytdl_video_value}' is '${video_value}'"

        # Trim off 'Uploads_from_' when returning titles of playlists that are just
        # all the videos a user has uploaded
        if [ "$ytdl_video_value" = "playlist_title" ]; then
          string_to_trim="Uploads_from_"
          if test "${video_value#*$string_to_trim}" != "$video_value"; then
            # Printout example: "Trimming off 'Uploads_from_' from 'Uploads_from_Channel_Name'"
            say_debug "Trimming off '${string_to_trim}' from '${video_value}'..."
            video_value="$(printf %s\\n "$video_value"|sed 's/.*Uploads_from_//g')"
            # Printout example: "New 'playlist_title' is 'Channel_Name'"
            say_debug "New '${ytdl_video_value}' is '${video_value}'"
          fi
        fi

        if [ "$ytdl_lowercase_directories" = true ]; then
          # Printout example: "Converting 'Channel_Name' to lowercase..."
          say_debug "Converting '${video_value}' to lowercase..."
          video_value=$(printf %s\\n "$video_value"|tr '[:upper:]' '[:lower:]')
          # Printout example: "New 'playlist_title' is 'channel_name'
          say_debug "New '${ytdl_video_value}' is '${video_value}'"
        fi
      fi

      download_all_the_things "$url"

      # youtube-dl's `--exec` option only processes the video file and not any
      # metadata files (.json, .jpg, .description, etc.). `rclone` is executed
      # again to ensure metadata gets moved to the rclone remote as well.
      #     * The download directory check is to ensure we don't run `rclone`
      #       unnecessarily in the event no new videos/metadata are downloaded
      download_directory="${ytdl_download_dir%/}/${video_value}"
      if [ -d "$download_directory" ]; then
        say_debug "Uploading metadata to rclone remote..."
        $rclone_bin "$rclone_command" "${ytdl_download_dir%/}" "${rclone_destination%/}" \
          --config "$rclone_config" $rclone_flags $rclone_debug_flags
      fi

      # Delete leftover download directory if:
      #   - it exists
      #   - it doesn't contain any files
      #   - `rclone_command` is set to move
      if [ -d "$download_directory" ] && is_empty "$download_directory" && [ "$rclone_command" = "move" ]; then
        say_debug "Removing leftover download directory: ${download_directory}"
        rmdir "$download_directory"
      fi

    fi
  done < "$fifo"
  rm "$fifo"
fi

say "Process complete. Removing lock file."
rm "$lock_file"

